<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="5" skipped="0" tests="93" time="13.158" timestamp="2025-03-18T14:34:36.328129+01:00" hostname="mf.local"><testcase classname="tests.integration.test_user_api.TestUserRegistrationAPI" name="test_register_success" time="0.287" /><testcase classname="tests.integration.test_user_api.TestUserRegistrationAPI" name="test_register_duplicate_fields[email]" time="0.254" /><testcase classname="tests.integration.test_user_api.TestUserRegistrationAPI" name="test_register_duplicate_fields[username]" time="0.250" /><testcase classname="tests.integration.test_user_api.TestUserRegistrationAPI" name="test_register_invalid_email" time="0.012" /><testcase classname="tests.integration.test_user_api.TestGetUserAPI" name="test_get_user_success[&lt;lambda&gt;-&lt;lambda&gt;0]" time="0.250" /><testcase classname="tests.integration.test_user_api.TestGetUserAPI" name="test_get_user_success[&lt;lambda&gt;-&lt;lambda&gt;1]" time="0.249" /><testcase classname="tests.integration.test_user_api.TestGetUserAPI" name="test_get_user_success[&lt;lambda&gt;-&lt;lambda&gt;2]" time="0.288" /><testcase classname="tests.integration.test_user_api.TestGetUserAPI" name="test_get_user_not_found[/api/v1/users/9999-9999]" time="0.012" /><testcase classname="tests.integration.test_user_api.TestGetUserAPI" name="test_get_user_not_found[/api/v1/users/by-email/nonexistent@example.com-nonexistent@example.com]" time="0.012" /><testcase classname="tests.integration.test_user_api.TestGetUserAPI" name="test_get_user_not_found[/api/v1/users/by-username/nonexistent_user-nonexistent_user]" time="0.012" /><testcase classname="tests.integration.test_user_api.TestListUsersAPI" name="test_list_users" time="0.249"><failure message="assert 307 == 200&#10; +  where 307 = &lt;Response [307 Temporary Redirect]&gt;.status_code">self = &lt;test_user_api.TestListUsersAPI object at 0x1127598d0&gt;, async_client = &lt;httpx.AsyncClient object at 0x112afc8d0&gt;
test_user = &lt;User(id=1, username=testuser, email=test@example.com)&gt;
db_session = &lt;sqlalchemy.orm.session.AsyncSession object at 0x112afcc50&gt;

    #x1B[0m#x1B[94masync#x1B[39;49;00m #x1B[94mdef#x1B[39;49;00m#x1B[90m #x1B[39;49;00m#x1B[92mtest_list_users#x1B[39;49;00m(#x1B[96mself#x1B[39;49;00m, async_client, test_user, db_session):#x1B[90m#x1B[39;49;00m
        #x1B[94mfor#x1B[39;49;00m i #x1B[95min#x1B[39;49;00m #x1B[96mrange#x1B[39;49;00m(#x1B[94m5#x1B[39;49;00m):#x1B[90m#x1B[39;49;00m
            db_session.add(User(#x1B[90m#x1B[39;49;00m
                email=#x1B[33mf#x1B[39;49;00m#x1B[33m"#x1B[39;49;00m#x1B[33muser#x1B[39;49;00m#x1B[33m{#x1B[39;49;00mi#x1B[33m}#x1B[39;49;00m#x1B[33m@example.com#x1B[39;49;00m#x1B[33m"#x1B[39;49;00m,#x1B[90m#x1B[39;49;00m
                username=#x1B[33mf#x1B[39;49;00m#x1B[33m"#x1B[39;49;00m#x1B[33muser#x1B[39;49;00m#x1B[33m{#x1B[39;49;00mi#x1B[33m}#x1B[39;49;00m#x1B[33m"#x1B[39;49;00m,#x1B[90m#x1B[39;49;00m
                hashed_password=#x1B[33m"#x1B[39;49;00m#x1B[33mhash#x1B[39;49;00m#x1B[33m"#x1B[39;49;00m,#x1B[90m#x1B[39;49;00m
                is_active=#x1B[94mTrue#x1B[39;49;00m#x1B[90m#x1B[39;49;00m
            ))#x1B[90m#x1B[39;49;00m
        #x1B[94mawait#x1B[39;49;00m db_session.commit()#x1B[90m#x1B[39;49;00m
    #x1B[90m#x1B[39;49;00m
        response = #x1B[94mawait#x1B[39;49;00m async_client.get(API_BASE)#x1B[90m#x1B[39;49;00m
&gt;       data = assert_success_response(response, status.HTTP_200_OK, #x1B[33m"#x1B[39;49;00m#x1B[33musers_retrieved#x1B[39;49;00m#x1B[33m"#x1B[39;49;00m)#x1B[90m#x1B[39;49;00m

#x1B[1m#x1B[31mtests/integration/test_user_api.py#x1B[0m:128: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

response = &lt;Response [307 Temporary Redirect]&gt;, expected_status = 200, message_key = 'users_retrieved'

    #x1B[0m#x1B[94mdef#x1B[39;49;00m#x1B[90m #x1B[39;49;00m#x1B[92massert_success_response#x1B[39;49;00m(response, expected_status, message_key=#x1B[94mNone#x1B[39;49;00m):#x1B[90m#x1B[39;49;00m
&gt;       #x1B[94massert#x1B[39;49;00m response.status_code == expected_status#x1B[90m#x1B[39;49;00m
#x1B[1m#x1B[31mE       assert 307 == 200#x1B[0m
#x1B[1m#x1B[31mE        +  where 307 = &lt;Response [307 Temporary Redirect]&gt;.status_code#x1B[0m

#x1B[1m#x1B[31mtests/integration/test_user_api.py#x1B[0m:26: AssertionError</failure></testcase><testcase classname="tests.integration.test_user_api.TestListUsersAPI" name="test_pagination[0-5-1]" time="0.017"><failure message="json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)">self = &lt;test_user_api.TestListUsersAPI object at 0x112747250&gt;, async_client = &lt;httpx.AsyncClient object at 0x112c4bad0&gt;
db_session = &lt;sqlalchemy.orm.session.AsyncSession object at 0x112c580d0&gt;, skip = 0, limit = 5, expected_page = 1

    #x1B[0m#x1B[37m@pytest#x1B[39;49;00m.mark.parametrize(#x1B[33m"#x1B[39;49;00m#x1B[33mskip,limit,expected_page#x1B[39;49;00m#x1B[33m"#x1B[39;49;00m, [#x1B[90m#x1B[39;49;00m
        (#x1B[94m0#x1B[39;49;00m, #x1B[94m5#x1B[39;49;00m, #x1B[94m1#x1B[39;49;00m),#x1B[90m#x1B[39;49;00m
        (#x1B[94m5#x1B[39;49;00m, #x1B[94m5#x1B[39;49;00m, #x1B[94m2#x1B[39;49;00m),#x1B[90m#x1B[39;49;00m
        (#x1B[94m10#x1B[39;49;00m, #x1B[94m5#x1B[39;49;00m, #x1B[94m3#x1B[39;49;00m)#x1B[90m#x1B[39;49;00m
    ])#x1B[90m#x1B[39;49;00m
    #x1B[94masync#x1B[39;49;00m #x1B[94mdef#x1B[39;49;00m#x1B[90m #x1B[39;49;00m#x1B[92mtest_pagination#x1B[39;49;00m(#x1B[96mself#x1B[39;49;00m, async_client, db_session, skip, limit, expected_page):#x1B[90m#x1B[39;49;00m
        #x1B[94mfor#x1B[39;49;00m i #x1B[95min#x1B[39;49;00m #x1B[96mrange#x1B[39;49;00m(#x1B[94m15#x1B[39;49;00m):#x1B[90m#x1B[39;49;00m
            db_session.add(User(#x1B[90m#x1B[39;49;00m
                email=#x1B[33mf#x1B[39;49;00m#x1B[33m"#x1B[39;49;00m#x1B[33muser#x1B[39;49;00m#x1B[33m{#x1B[39;49;00mi#x1B[33m}#x1B[39;49;00m#x1B[33m@example.com#x1B[39;49;00m#x1B[33m"#x1B[39;49;00m,#x1B[90m#x1B[39;49;00m
                username=#x1B[33mf#x1B[39;49;00m#x1B[33m"#x1B[39;49;00m#x1B[33muser#x1B[39;49;00m#x1B[33m{#x1B[39;49;00mi#x1B[33m}#x1B[39;49;00m#x1B[33m"#x1B[39;49;00m,#x1B[90m#x1B[39;49;00m
                hashed_password=#x1B[33m"#x1B[39;49;00m#x1B[33mhash#x1B[39;49;00m#x1B[33m"#x1B[39;49;00m,#x1B[90m#x1B[39;49;00m
                is_active=#x1B[94mTrue#x1B[39;49;00m#x1B[90m#x1B[39;49;00m
            ))#x1B[90m#x1B[39;49;00m
        #x1B[94mawait#x1B[39;49;00m db_session.commit()#x1B[90m#x1B[39;49;00m
    #x1B[90m#x1B[39;49;00m
        response = #x1B[94mawait#x1B[39;49;00m async_client.get(#x1B[33mf#x1B[39;49;00m#x1B[33m"#x1B[39;49;00m#x1B[33m{#x1B[39;49;00mAPI_BASE#x1B[33m}#x1B[39;49;00m#x1B[33m?skip=#x1B[39;49;00m#x1B[33m{#x1B[39;49;00mskip#x1B[33m}#x1B[39;49;00m#x1B[33m&amp;limit=#x1B[39;49;00m#x1B[33m{#x1B[39;49;00mlimit#x1B[33m}#x1B[39;49;00m#x1B[33m"#x1B[39;49;00m)#x1B[90m#x1B[39;49;00m
&gt;       data = response.json()#x1B[90m#x1B[39;49;00m

#x1B[1m#x1B[31mtests/integration/test_user_api.py#x1B[0m:148: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
#x1B[1m#x1B[31m../../../../../../Library/Caches/pypoetry/virtualenvs/speechflow-1AAUX87O-py3.11/lib/python3.11/site-packages/httpx/_models.py#x1B[0m:832: in json
    #x1B[0m#x1B[94mreturn#x1B[39;49;00m jsonlib.loads(#x1B[96mself#x1B[39;49;00m.content, **kwargs)#x1B[90m#x1B[39;49;00m
#x1B[1m#x1B[31m../../../../../../.pyenv/versions/3.11.2/lib/python3.11/json/__init__.py#x1B[0m:346: in loads
    #x1B[0m#x1B[94mreturn#x1B[39;49;00m _default_decoder.decode(s)#x1B[90m#x1B[39;49;00m
#x1B[1m#x1B[31m../../../../../../.pyenv/versions/3.11.2/lib/python3.11/json/decoder.py#x1B[0m:337: in decode
    #x1B[0mobj, end = #x1B[96mself#x1B[39;49;00m.raw_decode(s, idx=_w(s, #x1B[94m0#x1B[39;49;00m).end())#x1B[90m#x1B[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;json.decoder.JSONDecoder object at 0x105462150&gt;, s = '', idx = 0

    #x1B[0m#x1B[94mdef#x1B[39;49;00m#x1B[90m #x1B[39;49;00m#x1B[92mraw_decode#x1B[39;49;00m(#x1B[96mself#x1B[39;49;00m, s, idx=#x1B[94m0#x1B[39;49;00m):#x1B[90m#x1B[39;49;00m
    #x1B[90m    #x1B[39;49;00m#x1B[33m"""Decode a JSON document from ``s`` (a ``str`` beginning with#x1B[39;49;00m
    #x1B[33m    a JSON document) and return a 2-tuple of the Python#x1B[39;49;00m
    #x1B[33m    representation and the index in ``s`` where the document ended.#x1B[39;49;00m
    #x1B[33m#x1B[39;49;00m
    #x1B[33m    This can be used to decode a JSON document from a string that may#x1B[39;49;00m
    #x1B[33m    have extraneous data at the end.#x1B[39;49;00m
    #x1B[33m#x1B[39;49;00m
    #x1B[33m    """#x1B[39;49;00m#x1B[90m#x1B[39;49;00m
        #x1B[94mtry#x1B[39;49;00m:#x1B[90m#x1B[39;49;00m
            obj, end = #x1B[96mself#x1B[39;49;00m.scan_once(s, idx)#x1B[90m#x1B[39;49;00m
        #x1B[94mexcept#x1B[39;49;00m #x1B[96mStopIteration#x1B[39;49;00m #x1B[94mas#x1B[39;49;00m err:#x1B[90m#x1B[39;49;00m
&gt;           #x1B[94mraise#x1B[39;49;00m JSONDecodeError(#x1B[33m"#x1B[39;49;00m#x1B[33mExpecting value#x1B[39;49;00m#x1B[33m"#x1B[39;49;00m, s, err.value) #x1B[94mfrom#x1B[39;49;00m#x1B[90m #x1B[39;49;00m#x1B[94mNone#x1B[39;49;00m#x1B[90m#x1B[39;49;00m
#x1B[1m#x1B[31mE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)#x1B[0m

#x1B[1m#x1B[31m../../../../../../.pyenv/versions/3.11.2/lib/python3.11/json/decoder.py#x1B[0m:355: JSONDecodeError</failure></testcase><testcase classname="tests.integration.test_user_api.TestListUsersAPI" name="test_pagination[5-5-2]" time="0.017"><failure message="json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)">self = &lt;test_user_api.TestListUsersAPI object at 0x1127472d0&gt;, async_client = &lt;httpx.AsyncClient object at 0x112b6e1d0&gt;
db_session = &lt;sqlalchemy.orm.session.AsyncSession object at 0x112b6d290&gt;, skip = 5, limit = 5, expected_page = 2

    #x1B[0m#x1B[37m@pytest#x1B[39;49;00m.mark.parametrize(#x1B[33m"#x1B[39;49;00m#x1B[33mskip,limit,expected_page#x1B[39;49;00m#x1B[33m"#x1B[39;49;00m, [#x1B[90m#x1B[39;49;00m
        (#x1B[94m0#x1B[39;49;00m, #x1B[94m5#x1B[39;49;00m, #x1B[94m1#x1B[39;49;00m),#x1B[90m#x1B[39;49;00m
        (#x1B[94m5#x1B[39;49;00m, #x1B[94m5#x1B[39;49;00m, #x1B[94m2#x1B[39;49;00m),#x1B[90m#x1B[39;49;00m
        (#x1B[94m10#x1B[39;49;00m, #x1B[94m5#x1B[39;49;00m, #x1B[94m3#x1B[39;49;00m)#x1B[90m#x1B[39;49;00m
    ])#x1B[90m#x1B[39;49;00m
    #x1B[94masync#x1B[39;49;00m #x1B[94mdef#x1B[39;49;00m#x1B[90m #x1B[39;49;00m#x1B[92mtest_pagination#x1B[39;49;00m(#x1B[96mself#x1B[39;49;00m, async_client, db_session, skip, limit, expected_page):#x1B[90m#x1B[39;49;00m
        #x1B[94mfor#x1B[39;49;00m i #x1B[95min#x1B[39;49;00m #x1B[96mrange#x1B[39;49;00m(#x1B[94m15#x1B[39;49;00m):#x1B[90m#x1B[39;49;00m
            db_session.add(User(#x1B[90m#x1B[39;49;00m
                email=#x1B[33mf#x1B[39;49;00m#x1B[33m"#x1B[39;49;00m#x1B[33muser#x1B[39;49;00m#x1B[33m{#x1B[39;49;00mi#x1B[33m}#x1B[39;49;00m#x1B[33m@example.com#x1B[39;49;00m#x1B[33m"#x1B[39;49;00m,#x1B[90m#x1B[39;49;00m
                username=#x1B[33mf#x1B[39;49;00m#x1B[33m"#x1B[39;49;00m#x1B[33muser#x1B[39;49;00m#x1B[33m{#x1B[39;49;00mi#x1B[33m}#x1B[39;49;00m#x1B[33m"#x1B[39;49;00m,#x1B[90m#x1B[39;49;00m
                hashed_password=#x1B[33m"#x1B[39;49;00m#x1B[33mhash#x1B[39;49;00m#x1B[33m"#x1B[39;49;00m,#x1B[90m#x1B[39;49;00m
                is_active=#x1B[94mTrue#x1B[39;49;00m#x1B[90m#x1B[39;49;00m
            ))#x1B[90m#x1B[39;49;00m
        #x1B[94mawait#x1B[39;49;00m db_session.commit()#x1B[90m#x1B[39;49;00m
    #x1B[90m#x1B[39;49;00m
        response = #x1B[94mawait#x1B[39;49;00m async_client.get(#x1B[33mf#x1B[39;49;00m#x1B[33m"#x1B[39;49;00m#x1B[33m{#x1B[39;49;00mAPI_BASE#x1B[33m}#x1B[39;49;00m#x1B[33m?skip=#x1B[39;49;00m#x1B[33m{#x1B[39;49;00mskip#x1B[33m}#x1B[39;49;00m#x1B[33m&amp;limit=#x1B[39;49;00m#x1B[33m{#x1B[39;49;00mlimit#x1B[33m}#x1B[39;49;00m#x1B[33m"#x1B[39;49;00m)#x1B[90m#x1B[39;49;00m
&gt;       data = response.json()#x1B[90m#x1B[39;49;00m

#x1B[1m#x1B[31mtests/integration/test_user_api.py#x1B[0m:148: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
#x1B[1m#x1B[31m../../../../../../Library/Caches/pypoetry/virtualenvs/speechflow-1AAUX87O-py3.11/lib/python3.11/site-packages/httpx/_models.py#x1B[0m:832: in json
    #x1B[0m#x1B[94mreturn#x1B[39;49;00m jsonlib.loads(#x1B[96mself#x1B[39;49;00m.content, **kwargs)#x1B[90m#x1B[39;49;00m
#x1B[1m#x1B[31m../../../../../../.pyenv/versions/3.11.2/lib/python3.11/json/__init__.py#x1B[0m:346: in loads
    #x1B[0m#x1B[94mreturn#x1B[39;49;00m _default_decoder.decode(s)#x1B[90m#x1B[39;49;00m
#x1B[1m#x1B[31m../../../../../../.pyenv/versions/3.11.2/lib/python3.11/json/decoder.py#x1B[0m:337: in decode
    #x1B[0mobj, end = #x1B[96mself#x1B[39;49;00m.raw_decode(s, idx=_w(s, #x1B[94m0#x1B[39;49;00m).end())#x1B[90m#x1B[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;json.decoder.JSONDecoder object at 0x105462150&gt;, s = '', idx = 0

    #x1B[0m#x1B[94mdef#x1B[39;49;00m#x1B[90m #x1B[39;49;00m#x1B[92mraw_decode#x1B[39;49;00m(#x1B[96mself#x1B[39;49;00m, s, idx=#x1B[94m0#x1B[39;49;00m):#x1B[90m#x1B[39;49;00m
    #x1B[90m    #x1B[39;49;00m#x1B[33m"""Decode a JSON document from ``s`` (a ``str`` beginning with#x1B[39;49;00m
    #x1B[33m    a JSON document) and return a 2-tuple of the Python#x1B[39;49;00m
    #x1B[33m    representation and the index in ``s`` where the document ended.#x1B[39;49;00m
    #x1B[33m#x1B[39;49;00m
    #x1B[33m    This can be used to decode a JSON document from a string that may#x1B[39;49;00m
    #x1B[33m    have extraneous data at the end.#x1B[39;49;00m
    #x1B[33m#x1B[39;49;00m
    #x1B[33m    """#x1B[39;49;00m#x1B[90m#x1B[39;49;00m
        #x1B[94mtry#x1B[39;49;00m:#x1B[90m#x1B[39;49;00m
            obj, end = #x1B[96mself#x1B[39;49;00m.scan_once(s, idx)#x1B[90m#x1B[39;49;00m
        #x1B[94mexcept#x1B[39;49;00m #x1B[96mStopIteration#x1B[39;49;00m #x1B[94mas#x1B[39;49;00m err:#x1B[90m#x1B[39;49;00m
&gt;           #x1B[94mraise#x1B[39;49;00m JSONDecodeError(#x1B[33m"#x1B[39;49;00m#x1B[33mExpecting value#x1B[39;49;00m#x1B[33m"#x1B[39;49;00m, s, err.value) #x1B[94mfrom#x1B[39;49;00m#x1B[90m #x1B[39;49;00m#x1B[94mNone#x1B[39;49;00m#x1B[90m#x1B[39;49;00m
#x1B[1m#x1B[31mE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)#x1B[0m

#x1B[1m#x1B[31m../../../../../../.pyenv/versions/3.11.2/lib/python3.11/json/decoder.py#x1B[0m:355: JSONDecodeError</failure></testcase><testcase classname="tests.integration.test_user_api.TestListUsersAPI" name="test_pagination[10-5-3]" time="0.018"><failure message="json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)">self = &lt;test_user_api.TestListUsersAPI object at 0x112747450&gt;, async_client = &lt;httpx.AsyncClient object at 0x112b92c90&gt;
db_session = &lt;sqlalchemy.orm.session.AsyncSession object at 0x112b928d0&gt;, skip = 10, limit = 5, expected_page = 3

    #x1B[0m#x1B[37m@pytest#x1B[39;49;00m.mark.parametrize(#x1B[33m"#x1B[39;49;00m#x1B[33mskip,limit,expected_page#x1B[39;49;00m#x1B[33m"#x1B[39;49;00m, [#x1B[90m#x1B[39;49;00m
        (#x1B[94m0#x1B[39;49;00m, #x1B[94m5#x1B[39;49;00m, #x1B[94m1#x1B[39;49;00m),#x1B[90m#x1B[39;49;00m
        (#x1B[94m5#x1B[39;49;00m, #x1B[94m5#x1B[39;49;00m, #x1B[94m2#x1B[39;49;00m),#x1B[90m#x1B[39;49;00m
        (#x1B[94m10#x1B[39;49;00m, #x1B[94m5#x1B[39;49;00m, #x1B[94m3#x1B[39;49;00m)#x1B[90m#x1B[39;49;00m
    ])#x1B[90m#x1B[39;49;00m
    #x1B[94masync#x1B[39;49;00m #x1B[94mdef#x1B[39;49;00m#x1B[90m #x1B[39;49;00m#x1B[92mtest_pagination#x1B[39;49;00m(#x1B[96mself#x1B[39;49;00m, async_client, db_session, skip, limit, expected_page):#x1B[90m#x1B[39;49;00m
        #x1B[94mfor#x1B[39;49;00m i #x1B[95min#x1B[39;49;00m #x1B[96mrange#x1B[39;49;00m(#x1B[94m15#x1B[39;49;00m):#x1B[90m#x1B[39;49;00m
            db_session.add(User(#x1B[90m#x1B[39;49;00m
                email=#x1B[33mf#x1B[39;49;00m#x1B[33m"#x1B[39;49;00m#x1B[33muser#x1B[39;49;00m#x1B[33m{#x1B[39;49;00mi#x1B[33m}#x1B[39;49;00m#x1B[33m@example.com#x1B[39;49;00m#x1B[33m"#x1B[39;49;00m,#x1B[90m#x1B[39;49;00m
                username=#x1B[33mf#x1B[39;49;00m#x1B[33m"#x1B[39;49;00m#x1B[33muser#x1B[39;49;00m#x1B[33m{#x1B[39;49;00mi#x1B[33m}#x1B[39;49;00m#x1B[33m"#x1B[39;49;00m,#x1B[90m#x1B[39;49;00m
                hashed_password=#x1B[33m"#x1B[39;49;00m#x1B[33mhash#x1B[39;49;00m#x1B[33m"#x1B[39;49;00m,#x1B[90m#x1B[39;49;00m
                is_active=#x1B[94mTrue#x1B[39;49;00m#x1B[90m#x1B[39;49;00m
            ))#x1B[90m#x1B[39;49;00m
        #x1B[94mawait#x1B[39;49;00m db_session.commit()#x1B[90m#x1B[39;49;00m
    #x1B[90m#x1B[39;49;00m
        response = #x1B[94mawait#x1B[39;49;00m async_client.get(#x1B[33mf#x1B[39;49;00m#x1B[33m"#x1B[39;49;00m#x1B[33m{#x1B[39;49;00mAPI_BASE#x1B[33m}#x1B[39;49;00m#x1B[33m?skip=#x1B[39;49;00m#x1B[33m{#x1B[39;49;00mskip#x1B[33m}#x1B[39;49;00m#x1B[33m&amp;limit=#x1B[39;49;00m#x1B[33m{#x1B[39;49;00mlimit#x1B[33m}#x1B[39;49;00m#x1B[33m"#x1B[39;49;00m)#x1B[90m#x1B[39;49;00m
&gt;       data = response.json()#x1B[90m#x1B[39;49;00m

#x1B[1m#x1B[31mtests/integration/test_user_api.py#x1B[0m:148: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
#x1B[1m#x1B[31m../../../../../../Library/Caches/pypoetry/virtualenvs/speechflow-1AAUX87O-py3.11/lib/python3.11/site-packages/httpx/_models.py#x1B[0m:832: in json
    #x1B[0m#x1B[94mreturn#x1B[39;49;00m jsonlib.loads(#x1B[96mself#x1B[39;49;00m.content, **kwargs)#x1B[90m#x1B[39;49;00m
#x1B[1m#x1B[31m../../../../../../.pyenv/versions/3.11.2/lib/python3.11/json/__init__.py#x1B[0m:346: in loads
    #x1B[0m#x1B[94mreturn#x1B[39;49;00m _default_decoder.decode(s)#x1B[90m#x1B[39;49;00m
#x1B[1m#x1B[31m../../../../../../.pyenv/versions/3.11.2/lib/python3.11/json/decoder.py#x1B[0m:337: in decode
    #x1B[0mobj, end = #x1B[96mself#x1B[39;49;00m.raw_decode(s, idx=_w(s, #x1B[94m0#x1B[39;49;00m).end())#x1B[90m#x1B[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;json.decoder.JSONDecoder object at 0x105462150&gt;, s = '', idx = 0

    #x1B[0m#x1B[94mdef#x1B[39;49;00m#x1B[90m #x1B[39;49;00m#x1B[92mraw_decode#x1B[39;49;00m(#x1B[96mself#x1B[39;49;00m, s, idx=#x1B[94m0#x1B[39;49;00m):#x1B[90m#x1B[39;49;00m
    #x1B[90m    #x1B[39;49;00m#x1B[33m"""Decode a JSON document from ``s`` (a ``str`` beginning with#x1B[39;49;00m
    #x1B[33m    a JSON document) and return a 2-tuple of the Python#x1B[39;49;00m
    #x1B[33m    representation and the index in ``s`` where the document ended.#x1B[39;49;00m
    #x1B[33m#x1B[39;49;00m
    #x1B[33m    This can be used to decode a JSON document from a string that may#x1B[39;49;00m
    #x1B[33m    have extraneous data at the end.#x1B[39;49;00m
    #x1B[33m#x1B[39;49;00m
    #x1B[33m    """#x1B[39;49;00m#x1B[90m#x1B[39;49;00m
        #x1B[94mtry#x1B[39;49;00m:#x1B[90m#x1B[39;49;00m
            obj, end = #x1B[96mself#x1B[39;49;00m.scan_once(s, idx)#x1B[90m#x1B[39;49;00m
        #x1B[94mexcept#x1B[39;49;00m #x1B[96mStopIteration#x1B[39;49;00m #x1B[94mas#x1B[39;49;00m err:#x1B[90m#x1B[39;49;00m
&gt;           #x1B[94mraise#x1B[39;49;00m JSONDecodeError(#x1B[33m"#x1B[39;49;00m#x1B[33mExpecting value#x1B[39;49;00m#x1B[33m"#x1B[39;49;00m, s, err.value) #x1B[94mfrom#x1B[39;49;00m#x1B[90m #x1B[39;49;00m#x1B[94mNone#x1B[39;49;00m#x1B[90m#x1B[39;49;00m
#x1B[1m#x1B[31mE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)#x1B[0m

#x1B[1m#x1B[31m../../../../../../.pyenv/versions/3.11.2/lib/python3.11/json/decoder.py#x1B[0m:355: JSONDecodeError</failure></testcase><testcase classname="tests.integration.test_user_api.TestUpdateUserAPI" name="test_update_fields[update_data0]" time="0.251" /><testcase classname="tests.integration.test_user_api.TestUpdateUserAPI" name="test_update_fields[update_data1]" time="0.249" /><testcase classname="tests.integration.test_user_api.TestUpdateUserAPI" name="test_update_fields[update_data2]" time="0.249" /><testcase classname="tests.integration.test_user_api.TestUpdateUserAPI" name="test_update_conflict" time="0.248" /><testcase classname="tests.integration.test_user_api.TestDeleteUserAPI" name="test_delete_user" time="0.249"><failure message="assert &lt;User(id=1, username=testuser, email=test@example.com)&gt; is None">self = &lt;test_user_api.TestDeleteUserAPI object at 0x11273b7d0&gt;
async_client = &lt;httpx.AsyncClient object at 0x112aee810&gt;
test_user = &lt;User(id=1, username=testuser, email=test@example.com)&gt;
db_session = &lt;sqlalchemy.orm.session.AsyncSession object at 0x112aed990&gt;

    #x1B[0m#x1B[94masync#x1B[39;49;00m #x1B[94mdef#x1B[39;49;00m#x1B[90m #x1B[39;49;00m#x1B[92mtest_delete_user#x1B[39;49;00m(#x1B[96mself#x1B[39;49;00m, async_client, test_user, db_session):#x1B[90m#x1B[39;49;00m
        response = #x1B[94mawait#x1B[39;49;00m async_client.delete(USER_BY_ID(test_user.id))#x1B[90m#x1B[39;49;00m
        assert_success_response(response, status.HTTP_200_OK, #x1B[33m"#x1B[39;49;00m#x1B[33muser_deleted#x1B[39;49;00m#x1B[33m"#x1B[39;49;00m)#x1B[90m#x1B[39;49;00m
    #x1B[90m#x1B[39;49;00m
        deleted = #x1B[94mawait#x1B[39;49;00m db_session.get(User, test_user.id)#x1B[90m#x1B[39;49;00m
&gt;       #x1B[94massert#x1B[39;49;00m deleted #x1B[95mis#x1B[39;49;00m #x1B[94mNone#x1B[39;49;00m#x1B[90m#x1B[39;49;00m
#x1B[1m#x1B[31mE       assert &lt;User(id=1, username=testuser, email=test@example.com)&gt; is None#x1B[0m

#x1B[1m#x1B[31mtests/integration/test_user_api.py#x1B[0m:185: AssertionError</failure></testcase><testcase classname="tests.integration.test_user_api.TestDeleteUserAPI" name="test_delete_not_found" time="0.012" /><testcase classname="tests.integration.test_user_db.TestUserDatabaseRetrieval" name="test_get_user_by_id" time="0.237" /><testcase classname="tests.integration.test_user_db.TestUserDatabaseRetrieval" name="test_get_user_by_id_not_found" time="0.002" /><testcase classname="tests.integration.test_user_db.TestUserDatabaseRetrieval" name="test_get_user_by_email" time="0.236" /><testcase classname="tests.integration.test_user_db.TestUserDatabaseRetrieval" name="test_get_user_by_email_not_found" time="0.002" /><testcase classname="tests.integration.test_user_db.TestUserDatabaseRetrieval" name="test_get_user_by_username" time="0.236" /><testcase classname="tests.integration.test_user_db.TestUserDatabaseRetrieval" name="test_get_user_by_username_not_found" time="0.002" /><testcase classname="tests.integration.test_user_db.TestUserDatabaseUpdate" name="test_update_user_email" time="0.237" /><testcase classname="tests.integration.test_user_db.TestUserDatabaseUpdate" name="test_update_user_username" time="0.238" /><testcase classname="tests.integration.test_user_db.TestUserDatabaseUpdate" name="test_update_user_password" time="0.701" /><testcase classname="tests.integration.test_user_db.TestUserDatabaseUpdate" name="test_update_user_active_status" time="0.237" /><testcase classname="tests.integration.test_user_db.TestUserDatabaseUpdate" name="test_update_user_multiple_fields" time="0.238" /><testcase classname="tests.integration.test_user_db.TestUserDatabaseUpdate" name="test_update_user_no_changes" time="0.238" /><testcase classname="tests.integration.test_user_db.TestUserDatabaseUpdate" name="test_update_user_not_found" time="0.002" /><testcase classname="tests.integration.test_user_db.TestUserDatabaseUpdate" name="test_update_user_email_conflict" time="0.237" /><testcase classname="tests.integration.test_user_db.TestUserDatabaseUpdate" name="test_update_user_username_conflict" time="0.237" /><testcase classname="tests.unit.test_repository" name="test_repository_singleton" time="0.000" /><testcase classname="tests.unit.test_repository.TestUserRepository" name="test_create" time="0.002" /><testcase classname="tests.unit.test_repository.TestUserRepository" name="test_get" time="0.236" /><testcase classname="tests.unit.test_repository.TestUserRepository" name="test_get_nonexistent" time="0.002" /><testcase classname="tests.unit.test_repository.TestUserRepository" name="test_get_by_email" time="0.236" /><testcase classname="tests.unit.test_repository.TestUserRepository" name="test_get_by_email_nonexistent" time="0.002" /><testcase classname="tests.unit.test_repository.TestUserRepository" name="test_get_by_username" time="0.236" /><testcase classname="tests.unit.test_repository.TestUserRepository" name="test_get_by_username_nonexistent" time="0.002" /><testcase classname="tests.unit.test_repository.TestUserRepository" name="test_list" time="0.238" /><testcase classname="tests.unit.test_repository.TestUserRepository" name="test_list_with_pagination" time="0.239" /><testcase classname="tests.unit.test_repository.TestUserRepository" name="test_list_with_custom_query" time="0.238" /><testcase classname="tests.unit.test_repository.TestUserRepository" name="test_count" time="0.004" /><testcase classname="tests.unit.test_repository.TestUserRepository" name="test_count_with_query" time="0.005" /><testcase classname="tests.unit.test_repository.TestUserRepository" name="test_update" time="0.237" /><testcase classname="tests.unit.test_repository.TestUserRepository" name="test_update_nonexistent" time="0.002" /><testcase classname="tests.unit.test_repository.TestUserRepository" name="test_delete" time="0.237" /><testcase classname="tests.unit.test_repository.TestUserRepository" name="test_delete_nonexistent" time="0.002" /><testcase classname="tests.unit.test_user_router.TestRegisterEndpoint" name="test_register_success" time="0.021" /><testcase classname="tests.unit.test_user_router.TestRegisterEndpoint" name="test_register_validation_error" time="0.012" /><testcase classname="tests.unit.test_user_router.TestRegisterEndpoint" name="test_register_conflict_error" time="0.013" /><testcase classname="tests.unit.test_user_router.TestGetUserEndpoints" name="test_get_user_by_id_success" time="0.013" /><testcase classname="tests.unit.test_user_router.TestGetUserEndpoints" name="test_get_user_by_id_not_found" time="0.012" /><testcase classname="tests.unit.test_user_router.TestGetUserEndpoints" name="test_get_user_by_email_success" time="0.013" /><testcase classname="tests.unit.test_user_router.TestGetUserEndpoints" name="test_get_user_by_email_invalid_format" time="0.011" /><testcase classname="tests.unit.test_user_router.TestGetUserEndpoints" name="test_get_user_by_username_success" time="0.014" /><testcase classname="tests.unit.test_user_router.TestListUsersEndpoint" name="test_list_users_success" time="0.013" /><testcase classname="tests.unit.test_user_router.TestListUsersEndpoint" name="test_list_users_pagination" time="0.013" /><testcase classname="tests.unit.test_user_router.TestListUsersEndpoint" name="test_list_users_negative_skip" time="0.012" /><testcase classname="tests.unit.test_user_router.TestListUsersEndpoint" name="test_list_users_too_large_limit" time="0.037" /><testcase classname="tests.unit.test_user_router.TestUpdateUserEndpoint" name="test_update_user_success" time="0.012" /><testcase classname="tests.unit.test_user_router.TestUpdateUserEndpoint" name="test_update_user_not_found" time="0.012" /><testcase classname="tests.unit.test_user_router.TestUpdateUserEndpoint" name="test_update_user_conflict" time="0.012" /><testcase classname="tests.unit.test_user_router.TestUpdateUserEndpoint" name="test_update_user_invalid_email" time="0.013" /><testcase classname="tests.unit.test_user_router.TestDeleteUserEndpoint" name="test_delete_user_success" time="0.012" /><testcase classname="tests.unit.test_user_router.TestDeleteUserEndpoint" name="test_delete_user_not_found" time="0.012" /><testcase classname="tests.unit.test_user_service.TestRegisterUser" name="test_register_user_success" time="0.236" /><testcase classname="tests.unit.test_user_service.TestRegisterUser" name="test_register_user_email_conflict" time="0.236" /><testcase classname="tests.unit.test_user_service.TestRegisterUser" name="test_register_user_username_conflict" time="0.236" /><testcase classname="tests.unit.test_user_service.TestGetUser" name="test_get_user_by_id_success" time="0.236" /><testcase classname="tests.unit.test_user_service.TestGetUser" name="test_get_user_by_id_not_found" time="0.002" /><testcase classname="tests.unit.test_user_service.TestGetUser" name="test_get_user_by_email_success" time="0.236" /><testcase classname="tests.unit.test_user_service.TestGetUser" name="test_get_user_by_email_not_found" time="0.002" /><testcase classname="tests.unit.test_user_service.TestGetUser" name="test_get_user_by_username_success" time="0.236" /><testcase classname="tests.unit.test_user_service.TestGetUser" name="test_get_user_by_username_not_found" time="0.002" /><testcase classname="tests.unit.test_user_service.TestListUsers" name="test_list_users_empty" time="0.002" /><testcase classname="tests.unit.test_user_service.TestListUsers" name="test_list_users_single" time="0.238" /><testcase classname="tests.unit.test_user_service.TestListUsers" name="test_list_users_multiple" time="0.237" /><testcase classname="tests.unit.test_user_service.TestListUsers" name="test_list_users_pagination" time="0.241" /><testcase classname="tests.unit.test_user_service.TestUpdateUser" name="test_update_user_email" time="0.238" /><testcase classname="tests.unit.test_user_service.TestUpdateUser" name="test_update_user_username" time="0.238" /><testcase classname="tests.unit.test_user_service.TestUpdateUser" name="test_update_user_password" time="0.469" /><testcase classname="tests.unit.test_user_service.TestUpdateUser" name="test_update_user_active_status" time="0.238" /><testcase classname="tests.unit.test_user_service.TestUpdateUser" name="test_update_user_not_found" time="0.002" /><testcase classname="tests.unit.test_user_service.TestUpdateUser" name="test_update_user_email_conflict" time="0.238" /><testcase classname="tests.unit.test_user_service.TestUpdateUser" name="test_update_user_username_conflict" time="0.238" /><testcase classname="tests.unit.test_user_service.TestUpdateUser" name="test_update_user_no_changes" time="0.237" /><testcase classname="tests.unit.test_user_service.TestDeleteUser" name="test_delete_user_success" time="0.237" /><testcase classname="tests.unit.test_user_service.TestDeleteUser" name="test_delete_user_not_found" time="0.004" /></testsuite></testsuites>