name: CI

on:
  push:
    branches: [main]
  pull_request:

permissions:
  actions: read
  contents: read

jobs:
  main:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Setup Node.js environment
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - run: npm ci

      # Setup Python environment (match your project's Python version)
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # Install Poetry
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: '1.8.5'

      # Install Poetry dependencies for each Python project/service
      - name: Install Poetry dependencies (services)
        run: |
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project false
          for dir in packages/services/*; do
            if [ -f "$dir/pyproject.toml" ]; then
              echo "Installing dependencies in $dir"
              (cd "$dir" && poetry install --no-interaction --no-ansi)
            fi
          done

      # Also install Poetry dependencies for libraries if they exist
      - name: Install Poetry dependencies (libs)
        run: |
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project false
          for dir in packages/libs/*; do
            if [ -f "$dir/pyproject.toml" ]; then
              echo "Installing dependencies in $dir"
              (cd "$dir" && poetry install --no-interaction --no-ansi)
            fi
          done

      # Set NX SHAs for affected commands
      - uses: nrwl/nx-set-shas@v4

      # Run NX affected tasks
      - name: Run NX affected tasks
        run: |
          npx nx affected -t lint test build
