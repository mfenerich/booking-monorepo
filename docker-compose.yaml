services:
  # Database service
  postgres:
    image: postgres:15
    container_name: booking-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: booking_user
      POSTGRES_PASSWORD: booking_password
      POSTGRES_DB: booking_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U booking_user -d booking_db"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Users service
  users-service:
    build:
      context: .
      dockerfile: ./packages/services/users/Dockerfile
    container_name: booking-users-service
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql+asyncpg://booking_user:booking_password@postgres:5432/booking_db
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_USER: booking_user
      DATABASE_PASSWORD: booking_password
      DATABASE_NAME: booking_db
      JWT_SECRET_KEY: jwt_secret_key_for_development
      JWT_ALGORITHM: HS256
      JWT_ACCESS_TOKEN_EXPIRE_MINUTES: 30
      USERS_SERVICE_URL: http://users-service:8000
      DEBUG: "true"
      CORS_ORIGINS: '["http://localhost:3000", "http://frontend:3000", "http://0.0.0.0:3000", "http://localhost:8000", "http://localhost:8080"]'

    ports:
      - "8000:8000"

  # Frontend service
  frontend:
    build:
      context: .
      dockerfile: ./packages/frontend/Dockerfile
    container_name: booking-frontend
    restart: unless-stopped
    environment:
      NODE_ENV: development
      REACT_APP_API_URL: http://localhost:8000/api/v1
    ports:
      - "3000:3000"
    volumes:
      - ./:/app
    command: ["npx", "nx", "run", "stay-booker-pro:serve"]
    depends_on:
      - users-service

  # API Gateway - Single entry point for external requests
  api-gateway:
    image: nginx:alpine
    container_name: booking-api-gateway
    restart: unless-stopped
    ports:
      - "8080:80"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
    depends_on:
      - users-service
      - frontend

volumes:
  postgres_data:

networks:
  default:
    name: booking-network